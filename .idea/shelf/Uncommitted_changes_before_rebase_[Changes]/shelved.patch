Index: controllers/finder_controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\nCopyright 2023.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage controllers\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/go-logr/logr\"\n\t\"github.com/slack-go/slack\"\n\tkubefinderv1alpha1 \"github.com/tikalk/kube-finder/api/v1alpha1\"\n\t\"github.com/tmc/langchaingo/llms\"\n\t\"github.com/tmc/langchaingo/llms/openai\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/api/errors\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\t\"k8s.io/apimachinery/pkg/types\"\n\t\"reflect\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\t\"sigs.k8s.io/controller-runtime/pkg/log\"\n\t\"strings\"\n)\n\n// FinderReconciler reconciles a Finder object\ntype FinderReconciler struct {\n\tclient.Client\n\tScheme                   *runtime.Scheme\n\tlogger                   logr.Logger\n\tActiveKubeFinderHandlers map[string]*KubeFinderHandler\n}\n\n//+kubebuilder:rbac:groups=kubefinder.tikalk.com,resources=finders,verbs=get;list;watch;create;update;patch;delete\n//+kubebuilder:rbac:groups=kubefinder.tikalk.com,resources=finders/status,verbs=get;update;patch\n//+kubebuilder:rbac:groups=kubefinder.tikalk.com,resources=finders/finalizers,verbs=update\n//+kubebuilder:rbac:groups=\"\",resources=events,verbs=get;list;watch\n//+kubebuilder:rbac:groups=\"\",resources=pods,verbs=get;list;watch\n//+kubebuilder:rbac:groups=\"\",resources=secrets,verbs=get;list;watch\n\n// Reconcile is part of the main kubernetes reconciliation loop which aims to\n// move the current state of the cluster closer to the desired state.\n// TODO(user): Modify the Reconcile function to compare the state specified by\n// the Finder object against the actual cluster state, and then\n// perform operations to make the cluster state reflect the state specified by\n// the user.\n//\n// For more details, check Reconcile and its Result here:\n// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.14.1/pkg/reconcile\nfunc (r *FinderReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\tr.logger = log.FromContext(ctx)\n\tr.logger.Info(fmt.Sprintf(\"Reconciling Finder %s/%s\", req.Namespace, req.Name))\n\n\t// get the object from the api server\n\tkubeFinder := &kubefinderv1alpha1.Finder{}\n\tnamespaceName := fmt.Sprintf(\"%s/%s\", req.Namespace, req.Name)\n\n\tif err := r.Get(ctx, req.NamespacedName, kubeFinder); err != nil {\n\t\tif errors.IsNotFound(err) {\n\t\t\tr.logger.Info(fmt.Sprintf(\"kubeFinder object %s has been deleted. Removing handler...\", namespaceName))\n\t\t\tr.removeKubeFinderHandler(namespaceName)\n\t\t\treturn ctrl.Result{}, nil\n\t\t}\n\t\tr.logger.Error(err, \"unable to fetch Finder\")\n\t\treturn ctrl.Result{}, client.IgnoreNotFound(err)\n\t}\n\n\t// if kubeFinder is being updated, remove it from the active kubeFinderHandlers in order to create a new handler.\n\tif KubeFinderHandler := r.findKubeFinderHandler(namespaceName); KubeFinderHandler != nil {\n\t\tif reflect.DeepEqual(kubeFinder.Spec, KubeFinderHandler.kubeFinder.Spec) {\n\t\t\t// if spec has not changed, ignore the update.\n\t\t\tr.logger.Info(fmt.Sprintf(\"kubeFinder spec has not changed <%s>. Ignoring...\", req.NamespacedName))\n\t\t\treturn ctrl.Result{}, nil\n\t\t}\n\t\t// if spec has changed, remove the handler.\n\t\tr.logger.Info(fmt.Sprintf(\"KubeFinder object updated <%s>. Removing handler...\", namespaceName))\n\t\tr.removeKubeFinderHandler(namespaceName)\n\t}\n\n\t// create a new KubeFinderHandler.\n\tKubeFinderHandler, err := newKubeFinderHandler(*kubeFinder, *r)\n\tif err != nil {\n\t\tr.logger.Error(err, \"unable to create KubeFinderHandler\")\n\t\treturn ctrl.Result{}, err\n\t}\n\n\t// add KubeFinderHandler to the active kubeFinderHandlers.\n\tr.registerAndRunKubeFinderHandler(namespaceName, KubeFinderHandler)\n\treturn ctrl.Result{}, nil\n}\n\n// SetupWithManager sets up the controller with the Manager.\nfunc (r *FinderReconciler) SetupWithManager(mgr ctrl.Manager) error {\n\treturn ctrl.NewControllerManagedBy(mgr).\n\t\tFor(&kubefinderv1alpha1.Finder{}).\n\t\tComplete(r)\n}\n\nfunc (r *FinderReconciler) handlePods(ctx context.Context, kubeFinder *kubefinderv1alpha1.Finder) (err error) {\n\t// get all pods in all namespaces.\n\tpodList, err := r.ListPods(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tfor _, pod := range podList.Items {\n\t\tpodNamespacedName := getNamespacedName(pod)\n\n\t\tswitch pod.Status.Phase {\n\t\tcase corev1.PodPending: // TODO: check if the pod is already alive for more than 5 min in 'Pending' state for longer than 5 minutes.\n\t\t\tif r.isPodFound(pod, kubeFinder.Status.FoundPods) {\n\t\t\t\tr.logger.Info(fmt.Sprintf(\"Pod Name: %s already found\", podNamespacedName))\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tr.logger.Info(fmt.Sprintf(\"Found new pod,  name: %s, Pod status: %s\", podNamespacedName, pod.Status.Phase))\n\n\t\t\t// get pod events.\n\t\t\tevents, err := r.GetPodEvents(pod)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// get all events messages.\n\t\t\tvar totalEvents []string\n\t\t\tfor _, event := range events.Items {\n\t\t\t\ttotalEvents = append(totalEvents, event.Message)\n\t\t\t}\n\n\t\t\t// get answer from GPT-3.\n\t\t\tquestion := fmt.Sprintf(\"hey, i'm using kubernetes and got this errors: %s \\n, what should i do? please provide short steps for a solution. please provide any commands that can help. \", totalEvents)\n\t\t\tanswer, err := r.AskGPT(question)\n\t\t\tif err != nil {\n\t\t\t\tr.logger.Error(err, \"Got error while looking for answer\")\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t//r.logger.Info(fmt.Sprintf(\"\\n\\n\\nGot Answer: %s\\n\\n\\n\", answer))\n\n\t\t\t// send Slack notification.\n\t\t\terr = r.SendSlackNotification(podNamespacedName, pod.Kind, answer)\n\t\t\tif err != nil {\n\t\t\t\tr.logger.Error(err, \"Got error while sending slack notification\")\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// update kubeFinder status with the new pod found.\n\t\t\terr = r.updateNewFound(ctx, kubeFinder, pod, totalEvents)\n\t\t\tif err != nil {\n\t\t\t\tr.logger.Error(err, \"Got error while update kubeFinder status\")\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase corev1.PodRunning:\n\t\t\t// check if in finder event\n\t\t\tif r.isPodFound(pod, kubeFinder.Status.FoundPods) {\n\t\t\t\tr.logger.Info(fmt.Sprintf(\"Found pod %s in KubeFinder %s\\n\", podNamespacedName, kubeFinder.Name))\n\t\t\t\t// if in finder remove\n\t\t\t\tr.removeFound(ctx, kubeFinder, pod)\n\t\t\t\tr.logger.Info(fmt.Sprintf(\"Removed pod %s from KubeFinder %s events\\n\", podNamespacedName, kubeFinder.Name))\n\t\t\t}\n\t\tcase corev1.PodFailed:\n\t\t\tr.logger.Info(fmt.Sprintf(\"Found Pod Name: %s, Pod Status: %s\", pod.Name, pod.Status.Phase))\n\t\t}\n\t}\n\n\treturn nil\n}\nfunc (r *FinderReconciler) ListPods(ctx context.Context) (pods corev1.PodList, err error) {\n\t// get all pods in all namespaces.\n\tpodList := &corev1.PodList{}\n\tif err := r.List(ctx, podList); err != nil {\n\t\tr.logger.Error(err, \"unable to list pods\")\n\t\treturn *podList, err\n\t}\n\t// loop over each pod status field and print pod statu\n\n\treturn *podList, nil\n}\n\nfunc (r *FinderReconciler) GetPodEvents(pod corev1.Pod) (list corev1.EventList, err error) {\n\t// get events from pod.\n\tevents := &corev1.EventList{}\n\tif err := r.List(context.Background(), events, client.InNamespace(pod.Namespace), client.MatchingFields{\"involvedObject.name\": pod.GetName()}); err != nil {\n\t\tr.logger.Error(err, \"unable to list events\")\n\t\treturn *events, err\n\t}\n\treturn *events, nil\n}\n\nfunc (r *FinderReconciler) AskGPT(question string) (answer string, err error) {\n\tapiKey := r.getSecretData(\"kube-finder-secret\", \"kube-finder-system\", \"openai-api-key\")\n\tllm, err := openai.New(openai.WithToken(apiKey))\n\tif err != nil {\n\t\tr.logger.Error(err, \"unable to create openai client\")\n\t\treturn \"\", err\n\t}\n\tctx := context.Background()\n\tcompletion, err := llm.Call(ctx, question, llms.WithMaxLength(\n\t\t100, // max length of the completion\n\t), llms.WithModel(\"text-davinci-003\")) // the model to use for the completion\n\tif err != nil {\n\t\tr.logger.Error(err, \"unable to call openai\")\n\t}\n\treturn completion, nil\n}\n\nfunc (r *FinderReconciler) SendSlackNotification(resourceName string, resourceKind string, message string) (err error) {\n\tmessages := map[string]string{\n\t\t\"gptAnswer\": fmt.Sprintf(\"I found some issue with '%s' %s: \\n %s\", resourceName, resourceKind, message),\n\t}\n\n\tcolors := map[string]string{\n\t\t\"gptAnswer\": \"#36a64f\",\n\t\t\"error\":     \"#ff0000\",\n\t}\n\ttoken := r.getSecretData(\"kube-finder-secret\", \"kube-finder-system\", \"slack-token\")\n\tslackClient := slack.New(token)\n\t// Create the Slack attachment that we will send to the channel\n\tattachment := slack.Attachment{\n\t\tAuthorName: \"kube-finder:\",\n\t\tText:       messages[\"gptAnswer\"],\n\t\tColor:      colors[\"gptAnswer\"],\n\t\tMarkdownIn: []string{resourceName},\n\t\tFields: []slack.AttachmentField{\n\t\t\t{Title: \"Involve Resource:\"},\n\t\t\t{Value: fmt.Sprintf(\"%s - %s\", resourceKind, resourceName), Short: true},\n\t\t}}\n\n\tchannelID, timestamp, err := slackClient.PostMessage(\n\t\t\"C0580AP6881\",\n\t\tslack.MsgOptionAttachments(attachment),\n\t)\n\n\tif err != nil {\n\t\tr.logger.Error(err, \"got error while sending slack message\")\n\t\treturn\n\t}\n\n\tr.logger.Info(fmt.Sprintf(\"message successfully sent to channel %s at %s\", channelID, timestamp))\n\treturn nil\n\n}\n\nfunc (r *FinderReconciler) removeFound(ctx context.Context, kubeFinder *kubefinderv1alpha1.Finder, obj interface{}) (err error) {\n\n\t// fetch the latest Finder state from the server to avoid update conflicts\n\tupToDateKubeFinder := &kubefinderv1alpha1.Finder{}\n\tif err := r.Get(ctx, types.NamespacedName{\n\t\tName:      kubeFinder.Name,\n\t\tNamespace: kubeFinder.Namespace,\n\t}, upToDateKubeFinder); err != nil {\n\t\t// object no longer active, probably deleted, don't try to update, and return nil\n\t\tif errors.IsNotFound(err) {\n\t\t\treturn nil\n\t\t}\n\t\tr.logger.Error(err, \"unable to fetch Finder\")\n\t\treturn err\n\t}\n\n\tswitch obj := obj.(type) {\n\tcase corev1.Pod:\n\t\t// remove pod from FoundPods map.\n\t\tdelete(upToDateKubeFinder.Status.FoundPods, getNamespacedName(obj))\n\tcase corev1.Service:\n\t\t// init FoundServices map if not exist.\n\n\t}\n\n\terr = r.Client.Status().Update(ctx, upToDateKubeFinder)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc (r *FinderReconciler) updateNewFound(ctx context.Context, kubeFinder *kubefinderv1alpha1.Finder, obj interface{}, events []string) (err error) {\n\n\t// init new FoundSpec.\n\tfoundSpec := newFoundSpec(obj, events)\n\n\tswitch obj := obj.(type) {\n\tcase corev1.Pod:\n\t\t// init FoundPods map if not exist.\n\t\tif kubeFinder.Status.FoundPods == nil {\n\t\t\tkubeFinder.Status.FoundPods = make(map[string]kubefinderv1alpha1.FoundSpec)\n\t\t}\n\t\t// add new pod to FoundPods map.\n\t\tkubeFinder.Status.FoundPods[getNamespacedName(obj)] = *foundSpec\n\tcase corev1.Service:\n\t\t// init FoundServices map if not exist.\n\n\t}\n\n\t// fetch the latest Finder state from the server to avoid update conflicts\n\tupToDateKubeFinder := &kubefinderv1alpha1.Finder{}\n\tif err := r.Get(ctx, types.NamespacedName{\n\t\tName:      kubeFinder.Name,\n\t\tNamespace: kubeFinder.Namespace,\n\t}, upToDateKubeFinder); err != nil {\n\t\t// object no longer active, probably deleted, don't try to update, and return nil\n\t\tif errors.IsNotFound(err) {\n\t\t\treturn nil\n\t\t}\n\t\tr.logger.Error(err, \"unable to fetch Finder\")\n\t\treturn err\n\t}\n\n\terr = r.Client.Status().Update(ctx, kubeFinder)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n// registerAndRunResourceManagerHandler add the handler to the collection and then run it\nfunc (r *FinderReconciler) registerAndRunKubeFinderHandler(kubeFinderName string, kubeFinderHandler *KubeFinderHandler) {\n\tr.ActiveKubeFinderHandlers[kubeFinderName] = kubeFinderHandler\n\tgo func() {\n\t\terr := r.ActiveKubeFinderHandlers[kubeFinderName].Run()\n\t\tif err != nil {\n\t\t\tr.logger.Error(err, \"error while running kubeFinderHandler %s\", kubeFinderName)\n\t\t}\n\t}()\n}\nfunc (r *FinderReconciler) findKubeFinderHandler(kubeFinderName string) *KubeFinderHandler {\n\treturn r.ActiveKubeFinderHandlers[kubeFinderName]\n}\n\nfunc (r *FinderReconciler) removeKubeFinderHandler(kubeFinderName string) {\n\tif _, ok := r.ActiveKubeFinderHandlers[kubeFinderName]; ok {\n\t\tr.ActiveKubeFinderHandlers[kubeFinderName].Stop()\n\t\tdelete(r.ActiveKubeFinderHandlers, kubeFinderName)\n\t}\n}\n\nfunc (r *FinderReconciler) isPodFound(pod corev1.Pod, FoundPods map[string]kubefinderv1alpha1.FoundSpec) bool {\n\tif _, ok := FoundPods[getNamespacedName(pod)]; ok {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc getNamespacedName(obj interface{}) string {\n\tswitch obj := obj.(type) {\n\tcase corev1.Pod:\n\t\treturn fmt.Sprintf(\"%s/%s\", obj.Namespace, obj.Name)\n\tcase corev1.Service:\n\t\treturn fmt.Sprintf(\"%s/%s\", obj.Namespace, obj.Name)\n\t}\n\tpanic(fmt.Sprintf(\"unknown object type: %T\", obj))\n\n}\n\nfunc newFoundSpec(obj interface{}, events []string) *kubefinderv1alpha1.FoundSpec {\n\tswitch obj := obj.(type) {\n\tcase corev1.Pod:\n\t\treturn &kubefinderv1alpha1.FoundSpec{\n\t\t\tName:       obj.Name,\n\t\t\tNamespace:  obj.Namespace,\n\t\t\tObjectType: obj.Kind,\n\t\t\tMessage:    obj.Status.Message,\n\t\t\tEvents:     events,\n\t\t}\n\n\tcase corev1.Service:\n\t\treturn &kubefinderv1alpha1.FoundSpec{\n\t\t\tName:       obj.Name,\n\t\t\tNamespace:  obj.Namespace,\n\t\t\tObjectType: obj.Kind,\n\t\t\tMessage:    obj.Spec.ClusterIP,\n\t\t\tEvents:     events,\n\t\t}\n\t}\n\tpanic(fmt.Sprintf(\"unknown object type: %T\", obj))\n}\n\nfunc (r *FinderReconciler) getSecretData(name string, namespace string, key string) (data string) {\n\t// get secret\n\tsecretName := types.NamespacedName{Namespace: namespace, Name: name}\n\tsecret := &corev1.Secret{}\n\terr := r.Client.Get(context.Background(), secretName, secret)\n\tif err != nil {\n\t\tr.logger.Error(err, \"unable to get secret\")\n\t\treturn\n\t}\n\n\tr.logger.Info(fmt.Sprintf(\"secret: '%s' retrieved\", secret.Name))\n\n\t// strip the secret data\n\treturn strings.Trim(string(secret.Data[key]), \"\\n\")\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/finder_controller.go b/controllers/finder_controller.go
--- a/controllers/finder_controller.go	
+++ b/controllers/finder_controller.go	
@@ -19,20 +19,21 @@
 import (
 	"context"
 	"fmt"
+	"reflect"
+	"strings"
+	"time"
+
 	"github.com/go-logr/logr"
 	"github.com/slack-go/slack"
 	kubefinderv1alpha1 "github.com/tikalk/kube-finder/api/v1alpha1"
-	"github.com/tmc/langchaingo/llms"
 	"github.com/tmc/langchaingo/llms/openai"
 	corev1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/types"
-	"reflect"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
 	"sigs.k8s.io/controller-runtime/pkg/log"
-	"strings"
 )
 
 // FinderReconciler reconciles a Finder object
@@ -108,6 +109,12 @@
 		Complete(r)
 }
 
+func (r FinderReconciler) filterTimeByStartTime(minutes int, pod corev1.Pod) bool {
+	now := time.Now()
+	threshold := now.Add(-time.Duration(minutes) * time.Minute)
+	return pod.Status.StartTime.Unix() > threshold.Unix()
+}
+
 func (r *FinderReconciler) handlePods(ctx context.Context, kubeFinder *kubefinderv1alpha1.Finder) (err error) {
 	// get all pods in all namespaces.
 	podList, err := r.ListPods(ctx)
@@ -118,15 +125,21 @@
 	for _, pod := range podList.Items {
 		podNamespacedName := getNamespacedName(pod)
 
-		switch pod.Status.Phase {
-		case corev1.PodPending: // TODO: check if the pod is already alive for more than 5 min in 'Pending' state for longer than 5 minutes.
-			if r.isPodFound(pod, kubeFinder.Status.FoundPods) {
-				r.logger.Info(fmt.Sprintf("Pod Name: %s already found", podNamespacedName))
-				continue
-			}
+		if r.isPodFound(pod, kubeFinder.Status.FoundPods) {
+			r.logger.Info(fmt.Sprintf("Pod Name: %s already found", podNamespacedName))
+			continue
+		}
 
+		switch pod.Status.Phase {
+		case corev1.PodPending: // TODO: check if the pod is already alive for more than 5 min in 'Pending' state for longer than 5 minutes.
 			r.logger.Info(fmt.Sprintf("Found new pod,  name: %s, Pod status: %s", podNamespacedName, pod.Status.Phase))
 
+			// check if the pod is alive for longer than 1 minute.
+			if r.filterTimeByStartTime(1, pod) {
+				r.logger.Info(fmt.Sprintf("ignoring new pod '%s'", podNamespacedName))
+				continue
+			}
+
 			// get pod events.
 			events, err := r.GetPodEvents(pod)
 			if err != nil {
@@ -140,7 +153,7 @@
 			}
 
 			// get answer from GPT-3.
-			question := fmt.Sprintf("hey, i'm using kubernetes and got this errors: %s \n, what should i do? please provide short steps for a solution. please provide any commands that can help. ", totalEvents)
+			question := fmt.Sprintf("hey, i'm using kubernetes and got this errors: %s \n, please provide short explaination about the issue, together with steps for a solution. please provide any kubernetes commands that can help. the output should be readable and not longer than 100 letters. also, please add new line between the steps, if there are any commands, wrap commands in code block", totalEvents)
 			answer, err := r.AskGPT(question)
 			if err != nil {
 				r.logger.Error(err, "Got error while looking for answer")
@@ -149,7 +162,7 @@
 			//r.logger.Info(fmt.Sprintf("\n\n\nGot Answer: %s\n\n\n", answer))
 
 			// send Slack notification.
-			err = r.SendSlackNotification(podNamespacedName, pod.Kind, answer)
+			err = r.SendSlackNotification(podNamespacedName, pod.Kind, answer, kubeFinder.Spec.Notify.Slack.ChannelID)
 			if err != nil {
 				r.logger.Error(err, "Got error while sending slack notification")
 				return err
@@ -161,14 +174,7 @@
 				r.logger.Error(err, "Got error while update kubeFinder status")
 				return err
 			}
-		case corev1.PodRunning:
-			// check if in finder event
-			if r.isPodFound(pod, kubeFinder.Status.FoundPods) {
-				r.logger.Info(fmt.Sprintf("Found pod %s in KubeFinder %s\n", podNamespacedName, kubeFinder.Name))
-				// if in finder remove
-				r.removeFound(ctx, kubeFinder, pod)
-				r.logger.Info(fmt.Sprintf("Removed pod %s from KubeFinder %s events\n", podNamespacedName, kubeFinder.Name))
-			}
+
 		case corev1.PodFailed:
 			r.logger.Info(fmt.Sprintf("Found Pod Name: %s, Pod Status: %s", pod.Name, pod.Status.Phase))
 		}
@@ -206,18 +212,16 @@
 		return "", err
 	}
 	ctx := context.Background()
-	completion, err := llm.Call(ctx, question, llms.WithMaxLength(
-		100, // max length of the completion
-	), llms.WithModel("text-davinci-003")) // the model to use for the completion
+	completion, err := llm.Call(ctx, question) // the model to use for the completion
 	if err != nil {
 		r.logger.Error(err, "unable to call openai")
 	}
 	return completion, nil
 }
 
-func (r *FinderReconciler) SendSlackNotification(resourceName string, resourceKind string, message string) (err error) {
+func (r *FinderReconciler) SendSlackNotification(resourceName string, resourceKind string, message string, channelID string) (err error) {
 	messages := map[string]string{
-		"gptAnswer": fmt.Sprintf("I found some issue with '%s' %s: \n %s", resourceName, resourceKind, message),
+		"gptAnswer": fmt.Sprintf("Hey, I found some issue with '%s' %s: \n %s", resourceName, resourceKind, message),
 	}
 
 	colors := map[string]string{
@@ -238,7 +242,7 @@
 		}}
 
 	channelID, timestamp, err := slackClient.PostMessage(
-		"C0580AP6881",
+		channelID,
 		slack.MsgOptionAttachments(attachment),
 	)
 
@@ -250,38 +254,6 @@
 	r.logger.Info(fmt.Sprintf("message successfully sent to channel %s at %s", channelID, timestamp))
 	return nil
 
-}
-
-func (r *FinderReconciler) removeFound(ctx context.Context, kubeFinder *kubefinderv1alpha1.Finder, obj interface{}) (err error) {
-
-	// fetch the latest Finder state from the server to avoid update conflicts
-	upToDateKubeFinder := &kubefinderv1alpha1.Finder{}
-	if err := r.Get(ctx, types.NamespacedName{
-		Name:      kubeFinder.Name,
-		Namespace: kubeFinder.Namespace,
-	}, upToDateKubeFinder); err != nil {
-		// object no longer active, probably deleted, don't try to update, and return nil
-		if errors.IsNotFound(err) {
-			return nil
-		}
-		r.logger.Error(err, "unable to fetch Finder")
-		return err
-	}
-
-	switch obj := obj.(type) {
-	case corev1.Pod:
-		// remove pod from FoundPods map.
-		delete(upToDateKubeFinder.Status.FoundPods, getNamespacedName(obj))
-	case corev1.Service:
-		// init FoundServices map if not exist.
-
-	}
-
-	err = r.Client.Status().Update(ctx, upToDateKubeFinder)
-	if err != nil {
-		return err
-	}
-	return nil
 }
 
 func (r *FinderReconciler) updateNewFound(ctx context.Context, kubeFinder *kubefinderv1alpha1.Finder, obj interface{}, events []string) (err error) {
@@ -400,4 +372,4 @@
 	// strip the secret data
 	return strings.Trim(string(secret.Data[key]), "\n")
 
-}
\ No newline at end of file
+}
